#!/usr/bin/env python
#
# Upload a (set of) named file(s) to TiddlySpace
#
# expects a ~/.tiddlyspace-cookie file
#
# For Example:
#
#   $ tsupload bengillies tsupload -t cli -t upload -t tiddlyspace -t script -t python -B '{{{' -A '}}}'
#
# will upload this file to http://bengillies.tiddlyspace.com/tsupload
#
# written by Ben Gillies

import sys
from optparse import OptionParser
import os
import re
import mimetypes
from httplib2 import Http
from urllib import quote
from base64 import b64encode

from fsevents import Observer, Stream

mimetypes.add_type('text/plain', '.tid')
mimetypes.add_type('woff', '.application/x-woff')

def upload(space, title, tiddler, tags, before, after, stderr=sys.stderr):
    cookie = open(os.path.expanduser('~/.tiddlyspace-cookie'), 'r').read()
    http = Http()
    headers = {
        'Cookie': cookie.strip()
    }
    suffix = ''
    stdin = False
    if getattr(tags, '__iter__', None):
        tags = ['[[%s]]' % tag for tag in tags]
    else:
        tags = []

    if tiddler:
        tiddler_file = open(tiddler, 'r')
        if title == None:
            title = tiddler_file.name[tiddler_file.name.rfind('/') + 1:]
    else:
        tiddler = title
        stdin = True

    try:
        suffix = tiddler.rsplit('.', 1)[1]
    except IndexError:
        suffix = 'tid'

    try:
        body_type = mimetypes.guess_type(tiddler)[0]
        headers['Content-Type'] = body_type
    except KeyError:
        body_type = None

    if body_type == 'text/html' and title.endswith('.html'):
        title = title.rsplit('.', 1)[0]
    elif body_type == 'text/plain' and title.endswith('.tid'):
        title = title.rsplit('.', 1)[0]

    title = quote(title).replace('/', '%2F')
    uri = 'http://%s.tiddlyspace.com/bags/%s_public/tiddlers/%s' % (space,
        space, title)


    if not stdin:
        body = tiddler_file.read()
    else:
        body = sys.stdin.read()

    if before:
        body = '%s\n%s' % (before, body)
    if after:
        if not body.endswith('\n'):
            body += '\n'
        body += after

    if len(tags) > 0:
        try:
            body.encode('utf-8')
        except UnicodeDecodeError:
            body = b64encode(body)
        tag_line = 'tags: %s\n' % ' '.join(tags)
        if body_type != 'text/plain':
            type_line = 'type: %s\n' % body_type
            headers['Content-Type'] = 'text/plain'
        else:
            type_line = ''
        body = '%s%s\n%s' % (tag_line, type_line, body)
    elif body_type == 'text/plain':
        regex = '\w+: .*'
        if not re.match(regex, body.split('\n', 1)[0]):
            body = 'tags: \n\n' + body

    res, content = http.request(uri, method='PUT', headers=headers, body=body)
    if content:
        print STDERR
        STDERR.write(content)


if __name__ == '__main__':
    usage = 'usage: %prog [options] space file1 file2 ..'
    parser = OptionParser(usage=usage)
    parser.add_option('-N', '--name', help='set a custom title')
    parser.add_option('-t', '--tag', action='append', help='add a tag')
    parser.add_option('-B', '--before', help='add text before file')
    parser.add_option('-A', '--after', help='add text after file')
    parser.add_option('--watch', help='watch the named directory for changes' \
        ' and upload any to the given space')
    options, args = parser.parse_args()
    title = options.name
    tags = options.tag
    before = options.before
    after = options.after
    watch_dir = options.watch
    space = args[0]

    try:
        tiddlers = args[1:]
    except IndexError:
        tiddlers = [filename.strip() for filename in sys.stdin.readlines()]

    for tiddler in tiddlers:
        upload(space, title, tiddler, tags, before, after)

    if watch_dir:
        class HideErr(object):
            def write(self, source):
                pass
        observer = Observer()
        def callback(event):
            tiddler = event.name
            name = os.path.basename(tiddler)
            if not tiddler.endswith('swp'): # XXX: make configurable
                try:
                    upload(space, name, tiddler, tags, before, after, HideErr)
                except Exception: # don't die
                    pass # XXX: do something more intelligent here
        stream = Stream(callback, watch_dir, file_events=True)
        observer.schedule(stream)
        observer.start()
